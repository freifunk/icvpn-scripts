from formatter import Formatter
from textwrap import dedent
from socket import AF_INET, AF_INET6, inet_pton, error as socket_error


def try_inet_pton(af, ip):
    try:
        inet_pton(af, ip)
        return True
    except socket_error:
        return False


class _DNSFormatter(Formatter):

    filters = {
        "v4": lambda value: try_inet_pton(AF_INET, value),
        "v6": lambda value: try_inet_pton(AF_INET6, value),
    }

    def populate_argument_parser(self, parser):

        parser.add_argument(
            "--filter",
            dest="filter",
            help="""Only include certain servers.
                    Possible choices: %s
                 """ %
                 ", ".join(self.filters.keys()),
                 choices=list(self.filters.keys()))

    def _map_communities(self, arguments, communities):

        filters = [filters[options.filter]] if arguments.filter else []

        filtered = dict()

        for community, data in communities:

            try:
                domains = data['domains']
                nameservers = data['nameservers']
            except (TypeError, KeyError):
                continue

            servers = filter(lambda d: all(f(d) for f in filters), nameservers)
            servers = list(servers)

            servers = list(filter(lambda d: all(f(d) for f in filters), nameservers))

            if len(domains) == 0 or len(servers) == 0:
                filtered[community] = None
            else:
                filtered[community] = dict({'domains': domains, 'servers': servers})

        return filtered.items()

    def generate_config(self, arguments, communities):

        communities = self._map_communities(arguments, communities)

        for community, data in communities:

            self.add_comment(community)

            if data is None:
                self.add_comment("No valid domains found")
            else:
                self._format_config(data['domains'], data['servers'])


class DnsmasqFormatter(_DNSFormatter):

    def _format_config(self, domains, servers):
        for domain in domains:
            for server in servers:
                self.config.append("server=/%s/%s" % (domain, server))


class BindFormatter(_DNSFormatter):

    def _format_config(self, domains, servers):
        for domain in domains:
            self.config.append(dedent("""
           zone "%s" {
                    type static-stub;
                    server-addresses { %s; };
                };
            """ % (domain, "; ".join(servers))).lstrip())


class BindForwardFormatter(_DNSFormatter):

    def _format_config(self, domains, servers):
        for domain in domains:
            self.config.append(dedent("""
                zone "%s" {
                    type forward;
                    forwarders { %s; };
                    forward only;
                };
            """ % (domain, "; ".join(servers))).lstrip())


class UnboundForwardFormatter(_DNSFormatter):

    def generate_config(self, arguments, communities):

        communities = self._map_communities(arguments, communities)
        buffer = []

        self.add_comment(
            """
             This file is automatically generated.
            """)

        self.config.append('server:')
        self.config.append('\tlocal-zone: "10.in-addr.arpa" nodefault')
        for community, data in communities:

            if data is None:
                self.add_comment("No valid domains found")
                continue

            self.config.append('\n\t# %s' % community)
            for domain in data['domains']:
                if domain.endswith('.arpa'):
                    self.config.append('\tlocal-zone: "%s" nodefault' % domain)
                else:
                    self.config.append('\tdomain-insecure: "%s"' % domain)

            buffer.append('\n#\n# %s\n#\n' % community)
            for domain in data['domains']:
                buffer.append('forward-zone:')
                buffer.append('\tname: "%s"' % domain)
                for server in data['servers']:
                    buffer.append('\tforward-addr: %s' % server)

        self.config = self.config + buffer
