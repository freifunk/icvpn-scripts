#!/usr/bin/env python

import os
import yaml
from collections import defaultdict
from textwrap import dedent
from optparse import OptionParser
from socket import AF_INET, AF_INET6, inet_pton
from formatter import Formatter

class SmokePingFormatter(Formatter):
    "Formatter for SmokePing (http://oss.oetiker.ch/smokeping/)"
    def add_data(self, name, ip, probe):
      self.config.append(dedent("""
        ++ %(name)s
        menu = %(name)s
        title = %(name)s
        probe = %(probe)s
        host = %(ip)s
        #alerts = someloss

        """ % {"name": name, "ip":ip, "probe":probe}))

    def add_section(self, name):
      self.config.append(dedent("""
        + %(name)s
        menu = %(name)s
        title = %(name)s

        """ % {"name": name}))


def create_config(srcdir, exclude, fmtclass):
    """
    Generates a configuration using all files in srcdir (non-recursively)
    excluding communities from 'exclude'.

    The files are read in lexicographic order to produce deterministic results.
    """
    formatter = fmtclass()

    for fname in sorted(list(set(os.listdir(srcdir)) - set(exclude))):
        if fname.startswith("."):
            continue

        if fname.startswith("README"):
            continue

        fpath = os.path.join(srcdir, fname)
        if os.path.isfile(fpath):
            formatter.add_section(fname)
            with open(fpath) as f:
                data = yaml.load(f)
                community = fname

                if not data:
                    continue

                for host in sorted(data['bgp'].keys()):
                    d = data['bgp'][host]
                    if 'ipv4' in d:
                        peer = d['ipv4']
                        formatter.add_data("ipv4-"+host, peer,'FPing')
                    if 'ipv6' in d:
                        peer = d['ipv6']
                        formatter.add_data("ipv6-"+host, peer, 'FPing6')

    print(formatter.finalize())

if __name__ == "__main__":
    formatters = {
        "SmokePing": SmokePingFormatter,
    }

    parser = OptionParser()
    parser.add_option("-f", "--format", dest="fmt",
        help="Create config in format FMT. Possible values: %s. Default: SmokePing" % ", ".join(formatters.keys()), metavar="FMT",
        choices=list(formatters.keys()),
        default="SmokePing")
    parser.add_option("-s", "--sourcedir", dest="src",
        help="Use files in DIR as input files. Default: data/", metavar="DIR",
        default="data")
    parser.add_option("-x", "--exclude", dest="exclude", action="append",
        help="Exclude the comma-separated list of COMMUNITIES", metavar="COMMUNITIES",
        default=[])

    (options, args) = parser.parse_args()

    create_config(options.src, set(options.exclude),formatters[options.fmt])
